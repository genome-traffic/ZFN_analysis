5+4
source("http://cf.10xgenomics.com/supp/cell-exp/rkit-install-2.0.0.R")
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
exprs(gbm)
tsne_proj <- analysis_results$tsne
visualize_umi_counts(gbm,tsne_proj[c("TSNE.1","TSNE.2")],limits=c(3,4),marker_size=0.05)
tsne_proj <- analysis_results$tsne
visualize_umi_counts(gbm,tsne_proj[c("TSNE.1","TSNE.2")],limits=c(3,4),marker_size=0.05)
analysis_results$tsne
source('/media/nikiwind/DATADRIVE2/TALgen/ssanalysis_test/Test1.R')
ele <-("ZFN1","ZFN2","ZFN3","ZFN4","ZFN5","ZFN6","ZFN7","ZFN8","ZFN9","ZFN10","ZFN11","ZFN12","ZFN13","ZFN14","ZFN15","ZFN16","STOP1","STOP2")
ele =("ZFN1","ZFN2","ZFN3","ZFN4","ZFN5","ZFN6","ZFN7","ZFN8","ZFN9","ZFN10","ZFN11","ZFN12","ZFN13","ZFN14","ZFN15","ZFN16","STOP1","STOP2")
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
m <- combn(ele, 18, min)
m
m <- combn(ele, 18, min)
m
m[2]
m <- combn(ele, m=18, min)
m
ele
m <- combn(18, m=18, min)
m
m <- combn(18, m=18, min)
18
m
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
head(per)
head(psizes)
head(sizes)
source('/media/nikiwind/SSD2/Sync-CurrentWork/Shuffle/ZFNGen/Comb.R')
in <- read.table("l.txt", header=FALSE)
intron <- read.table("l.txt", header=FALSE)
source('/media/nikiwind/DATADRIVE2/Shuffle/introns/len.R')
hist(intron$V1)
intron <- subset(intron, V1 < 5000)
hist(intron$V1)
intron <- subset(intron, V1 > 100)
hist(intron$V1)
source('/media/nikiwind/DATADRIVE2/Shuffle/introns/len.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/introns/len.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
head(x = hg19.combined@cell.names)
table(hg19.combined@meta.data$orig.ident)
dense.size <- object.size(x = as.matrix(x = hg19.data))
dense.size <- object.size(x = as.matrix(x = hg19.combined))
head(x = hg19c.combined@cell.names)
head(x = hg19.combined@cell.names)
table(hg19.combined@meta.data$orig.ident)
dense.size <- object.size(x = as.matrix(x = hg19.combined@data))
dense.size
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
table(hg19.combined@meta.data$orig.ident)
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
table(hg19.combined@meta.data$orig.ident)
source('/media/nikiwind/DATADRIVE2/Shuffle/analysis/Seurat_merge.R')
head(percent.miro)
head(percent.mito)
table(percent.mito)
table(mito.genes)
head(hg19@data)
head(hg19)
head(hg19@raw.data)
head(hg19@data)
head(hg19@cell.names)
head(hg19@gene.names)
head(hg19@data@factors)
head(hg19@data@factors[1])
head(hg19@data@factors[2])
head(hg19@data)
type(hg19@data)
typeof(hg19@data)
typeof(hg19@data@i)
typeof(hg19@data@p)
typeof(hg19@data@Dim)
typeof(hg19@data@Dimnames)
typeof(hg19@data@x)
typeof(hg19@data@factors)
show(hg19@data)
mito.genes <- grep(pattern = "^hg19_MT-", x = rownames(x = hg19@data), value = TRUE)
percent.mito <- Matrix::colSums(hg19@raw.data[mito.genes, ])/Matrix::colSums(hg19@raw.data)
hg19 <- AddMetaData(object = hg19, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = hg19, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
par(mfrow = c(1, 2))
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "nGene")
hg19 <- FilterCells(object = hg19, subset.names = c("nGene", "percent.mito"), low.thresholds = c(200, -Inf), high.thresholds = c(7000, 0.05))
par(mfrow = c(1, 2))
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "nGene")
hg19 <- NormalizeData(object = hg19, normalization.method = "LogNormalize", scale.factor = 10000)
hg19 <- ScaleData(object = hg19, vars.to.regress = c("S.Score", "G2M.Score"), display.progress = FALSE)
hg19 <- CellCycleScoring(object = hg19, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE)
cc.genes <- readLines(con = "~/Downloads/seurat_resources/regev_lab_cell_cycle_genes.txt")
cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/regev_lab_cell_cycle_genes.txt")
hg19 <- CellCycleScoring(object = hg19, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE)
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
par(mfrow = c(1, 1))
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
hg19 <- ScaleData(object = hg19, vars.to.regress = "percent.mito")
marrow <- RunPCA(object = hg19, pc.genes = marrow@var.genes, pcs.print = 1:4, genes.print = 10)
hg19 <- RunPCA(object = hg19, pc.genes = marrow@var.genes, pcs.print = 1:4, genes.print = 10)
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, pcs.print = 1:4, genes.print = 10)
PCHeatmap(object = hg19, pc.use = 4, do.balanced = TRUE, label.columns = FALSE, remove.key = TRUE)
VizPCA(object = hg19, pcs.use = 1:2)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/regev_lab_cell_cycle_genes.txt")
s.genes <- cc.genes[1:43]
g2m.genes <- cc.genes[44:97]
hg19 <- CellCycleScoring(object = hg19, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE)
#cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/regev_lab_cell_cycle_genes.txt")
cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/ccg_h19.txt")
s.genes <- cc.genes[1:43]
g2m.genes <- cc.genes[44:97]
hg19 <- CellCycleScoring(object = hg19, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE)
hg19 <- ScaleData(object = hg19, vars.to.regress = c("S.Score", "G2M.Score"), display.progress = FALSE)
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, pcs.print = 1:4, genes.print = 10)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
RidgePlot(object = marrow, features.plot = c("hg19_PCNA", "hg19_TOP2A", "hg19_MCM6", "hg19_MKI67"), nCol = 2)
RidgePlot(object = hg19, features.plot = c("hg19_PCNA", "hg19_TOP2A", "hg19_MCM6", "hg19_MKI67"), nCol = 2)
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, pcs.print = 1:4, genes.print = 10)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
library(Seurat)
library(dplyr)
hg19_1K.data <- Read10X(data.dir = "/media/nikiwind/DATADRIVE2/Shuffle/datasets/1K/hgmm_1k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19")
hg19_1K <- CreateSeuratObject(raw.data = hg19_1K.data, project = "thou", min.genes = 5000)
hg19_100.data <- Read10X(data.dir = "/media/nikiwind/DATADRIVE2/Shuffle/datasets/100/hgmm_100_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19")
hg19_100 <- CreateSeuratObject(raw.data = hg19_100.data, project = "hun", min.genes = 5000)
hg19 <- MergeSeurat(object1 = hg19_1K, object2 = hg19_100, add.cell.id1 = "1K", add.cell.id2 = "100", project = "merge1100")
head(x = hg19@cell.names)
table(hg19@meta.data$orig.ident)
#dense.size <- object.size(x = as.matrix(x = hg19.combined@data))
#dense.size
mito.genes <- grep(pattern = "^hg19_MT-", x = rownames(x = hg19@data), value = TRUE)
percent.mito <- Matrix::colSums(hg19@raw.data[mito.genes, ])/Matrix::colSums(hg19@raw.data)
hg19 <- AddMetaData(object = hg19, metadata = percent.mito, col.name = "percent.mito")
VlnPlot(object = hg19, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
par(mfrow = c(1, 2))
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "nGene")
# We filter out cells that have unique gene counts over 2,500 or less than
# 200 Note that low.thresholds and high.thresholds are used to define a
# 'gate'.  -Inf and Inf should be used if you don't want a lower or upper
# threshold.
#pbmc <- FilterCells(object = pbmc, subset.names = c("nGene", "percent.mito"), low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
hg19 <- FilterCells(object = hg19, subset.names = c("nGene", "percent.mito"), low.thresholds = c(200, -Inf), high.thresholds = c(7000, 0.05))
hg19 <- NormalizeData(object = hg19, normalization.method = "LogNormalize", scale.factor = 10000)
par(mfrow = c(1, 1))
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
hg19 <- ScaleData(object = hg19, vars.to.regress = "percent.mito")
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, pcs.print = 1:4, genes.print = 10)
VizPCA(object = hg19, pcs.use = 1:2)
PCHeatmap(object = hg19, pc.use = 4, do.balanced = TRUE, label.columns = FALSE, remove.key = TRUE)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
#cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/regev_lab_cell_cycle_genes.txt")
cc.genes <- readLines(con = "/media/nikiwind/DATADRIVE2/Shuffle/analysis/cellcycle/ccg_h19.txt")
s.genes <- cc.genes[1:43]
g2m.genes <- cc.genes[44:97]
hg19 <- RunPCA(object = hg19, pc.genes = c(s.genes, g2m.genes), do.print = FALSE)
PCAPlot(object = hg19)
hg19 <- CellCycleScoring(object = hg19, s.genes = s.genes, g2m.genes = g2m.genes, set.ident = TRUE)
hg19 <- RunPCA(object = hg19, pc.genes = c(s.genes, g2m.genes), do.print = FALSE)
PCAPlot(object = hg19)
RidgePlot(object = hg19, features.plot = c("hg19_PCNA", "hg19_TOP2A", "hg19_MCM6", "hg19_MKI67"), nCol = 2)
hg19 <- ScaleData(object = hg19, vars.to.regress = c("S.Score", "G2M.Score"), display.progress = FALSE)
hg19 <- RunPCA(object = hg19, pc.genes = c(s.genes, g2m.genes), do.print = FALSE)
PCAPlot(object = hg19)
hg19 <- ScaleData(object = hg19, vars.to.regress = c("S.Score", "G2M.Score"), display.progress = FALSE)
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, genes.print = 10)
PCAPlot(object = hg19)
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, genes.print = 10)
PCAPlot(object = hg19)
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
hg19 <- RunTSNE(object = hg19, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = hg19)
hg19@var.genes
head(hg19@var.genes)
hg19@var.genes
hg19@cell.names
hg19@data@Dimnames
hg19@data@Dim
#hg19 <- RunPCA(object = hg19, pc.genes = hg19@var.genes, genes.print = 10)
hg19 <- RunPCA(object = hg19, genes.print = 10)
PCAPlot(object = hg19)
hg19@var.genes
head(hg19@var.genes)
hg19@scale.data
hg19@dr
head(hg19@dr)
head(hg19@dr[1])
head(hg19@dr[1,1])
head(hg19@dr[1,0])
head(hg19@dr[1])
head(hg19@meta.data)
hg19 <- RunTSNE(object = hg19, dims.use = 1:10, do.fast = TRUE, intent=old.ident)
TSNEPlot(object = hg19)
TSNEPlot(object = hg19, intent=old.ident)
TSNEPlot(object = hg19, group.by=old.ident)
hg19 <- RunTSNE(object = hg19, dims.use = 1:10, do.fast = TRUE, group.by=old.ident)
TSNEPlot(object = hg19, group.by=old.ident)
hg19@scale.data
hg19@data
hg19@data@x
head(hg19@data)
head(hg19@data@x)
head(hg19@meta.data)
TSNEPlot(object = hg19, group.by="old.ident")
TSNEPlot(object = hg19, group.by="orig.ident")
hg19@var.genes
hg19@scale.data
hg19@scale.data[1]
hg19@scale.data[2]
hg19@scale.data[2,1]
hg19@scale.data[2,]
hg19 <- FindVariableGenes(object = hg19, mean.function = ExpMean, dispersion.function = LogVMR)
hg19@data@p
hg19@data@Dim
hg19@data@x
hg19@hvg.info
head(hg19@hvg.info)
head(hg19@data)
head(hg19@is.expr)
head(AverageExpression(object = hg19))
head(AverageExpression(object = hg19, group.by="orig.ident"))
head(AverageExpression(object = hg19), group.by="orig.ident")
head(AverageExpression(object = hg19, group.by="orig.ident"))
cluster.averages <- AverageExpression(object = pbmc, return.seurat = TRUE, add.ident = "orig.ident", show.progress = FALSE)
cluster.averages <- AverageExpression(object = hg19, return.seurat = TRUE, add.ident = "orig.ident", show.progress = FALSE)
head(cluster.averages)
head(cluster.averages)
cluster.averages
cluster.averages@imputed
D <- as.matrix(x = HG19@raw.data[, WhichCells(object = pbmc, ident = "orig.ident")])
D <- as.matrix(x = hg19@raw.data[, WhichCells(object = pbmc, ident = "orig.ident")])
d <- as.matrix(x = hg19@raw.data[, WhichCells(object = hg19, ident = "orig.ident")])
head(hg19@raw.data)
table(hg19@ident)
hg19@ident
hg19 <- SetAllIdent(object = hg19, id = "orig.ident")
hg19@ident
hg19 <- SetAllIdent(object = hg19, id = "orig.ident")
hg19@ident
hg19@ident
table(hg19@ident)
head(AverageExpression(object = hg19)
)
#cluster.averages <- AverageExpression(object = hg19, return.seurat = TRUE, show.progress = FALSE)
cluster.averages <- AverageExpression(object = hg19, return.seurat = FALSE, show.progress = FALSE)
cluster.averages
head(cluster.averages)
plot(cluster.averages)
hg19@hvg.info
head(hg19@hvg.info)
head(hg19@hvg.info$gene.dispersion.scaled)
subset1 <- SubsetData(object = pbmc, ident.use = c("hun"))
subset1 <- SubsetData(object = hg19, ident.use = c("hun"))
subset2 <- SubsetData(object = hg19, ident.use = c("thou"))
head(subset1@hvg.info$gene.dispersion.scaled)
head(subset2@hvg.info$gene.dispersion.scaled)
subset1 <- FindVariableGenes(object = subset1, mean.function = ExpMean, dispersion.function = LogVMR)
subset2 <- FindVariableGenes(object = subset2, mean.function = ExpMean, dispersion.function = LogVMR)
head(subset1@hvg.info$gene.dispersion.scaled)
head(subset2@hvg.info$gene.dispersion.scaled)
plot(subset1@hvg.info$gene.dispersion.scaled, subset2@hvg.info$gene.dispersion.scaled)
barplot(subset1@hvg.info$gene.dispersion.scaled, subset2@hvg.info$gene.dispersion.scaled)
boxplot(subset1@hvg.info$gene.dispersion.scaled, subset2@hvg.info$gene.dispersion.scaled)
PCHeatmap(object = hg19, pc.use = 4, do.balanced = TRUE, label.columns = FALSE, remove.key = TRUE)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
PCHeatmap(object = hg19, pc.use = 4, do.balanced = TRUE, label.columns = FALSE, remove.key = TRUE)
PCAPlot(object = hg19, dim.1 = 1, dim.2 = 2)
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "nGene")
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = hg19, gene1 = "nUMI", gene2 = "percent.mito")
VlnPlot(object = hg19, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
y = pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
plot(y)
plot(pnorm(84, mean=72, sd=15.2, lower.tail=FALSE))
y <- pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
y
x <- seq(-100,100)
y <- densities<-dnorm(x, 0,1)
plot(y)
y <- densities<-dnorm(x, 0,10)
plot(y)
x <- seq(-100,100)
y <- densities<-dnorm(x, 0,100)
plot(y)
x <- seq(-100,100)
y <- densities<-dnorm(x, 0,10)
plot(y)
library(itns)
library(devtools)
install_github("gitrman/itns")
install_github("gitrman/itns")
library(itns)
?pen_laptop1
?itns
??itns
head(pen_laptop1)
plot(pen_laptop1)
??itns
?pen_laptop1
?pen_laptop2
plot(pen_laptop2)
plot(exam_scores)
head(exam_scores)
plot(exam_scores$exam1,exam_scores$exam_final)
head(home_prices)
plot(home_prices$location, home_prices$price)
plot(home_prices$bathrooms, home_prices$price)
plot(home_prices$size, home_prices$price)
plot(home_prices$size, home_prices$mls)
plot(home_prices$bathrooms, home_prices$bedrooms)
plot(natsal)
plot(natsal$sex)
plot(natsal$partners)
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
source('/media/nikiwind/SSD2/Sync-Computing/R Scripts/CQ_redkmer_predictor.R')
#!/usr/bin/env Rscript
library("devtools")
library (ggplot2)
require(gtools)
library(plyr)
library(devtools)
#install_github('kkdey/Logolas')
#library("Logolas")
library(RColorBrewer)
library(data.table)
library(dplyr)
library(ggplot2)
library(scales)
setwd("/media/nikiwind/DATADRIVE2/ZFN_analysis/R_analysis/")
#qdata <- fread("logs.txt")
qdata <- fread("logs2.txt")
setnames(qdata, c("read", "tool","score"))
weird <- table(qdata$read)
bad <- names(weird[weird < 17])
qdata <- qdata[! read %in% bad]
qdata$position <- seq(17)
qdata$set <- c("odd","even","odd","even","odd","even","odd","even","odd","even","odd","even","odd","even","odd","even","odd")
#pdata <- fread("p.txt", header=F)
pdata <- fread("p2.txt", header=F)
setnames(pdata, c("read", "1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17"))
pdata <-melt(pdata, id.vars = "read", variable.name = "position",value.name = "ZF")
data <- merge(pdata, qdata)
data <- na.omit(data)
datastats <- aggregate(score ~ position + tool, data=data, summary)
#ggplot(data = data, aes(x=position, y=score)) + geom_boxplot() + facet_wrap(tool ~ ZF, scales="free")
#ggplot(data = data, aes(x=position, y=score)) + geom_boxplot(aes(fill=ZF)) + facet_wrap( ~ tool, scales="free")
#ggplot(data = data, aes(x=position, y=ZF)) + geom_bar(aes(fill=ZF), stat="identity")
#ggplot(data = data) +  geom_bar(aes(x=position, y=ZF,fill=ZF), stat="identity") + facet_wrap( ~ set, scales="free")
#cutoff per quartile
# data[which(tool=="mmap" & score=="0")]$ZF <- NA
# for (p in 1:17) {
# data[which(tool=="gmap" & position==p & score<=datastats$score[p,5])]$ZF <- NA
# }
# for (p in 1:17) {
#   data[which(tool=="mmap" & position==p & score>=datastats$score[p+17,2])]$ZF <- NA
# }
#cutoff per median
data[which(tool=="mmap" & score=="0")]$ZF <- NA
for (p in 1:17) {
data[which(tool=="gmap" & position==p & score<=datastats$score[p,3])]$ZF <- NA
}
for (p in 1:17) {
data[which(tool=="mmap" & position==p & score>=datastats$score[p+17,3])]$ZF <- NA
}
dataclean <- as.data.frame.matrix((table(data[,2:3])))
datacleanper <- sweep(dataclean, 1, rowSums(dataclean), FUN="/")
datacleanper <- datacleanper*100
datacleanper$position <- seq(17)
datacleanper <- melt(datacleanper, id.vars="position")
setnames(datacleanper, c("position", "module","percent"))
#ordervector <- tibble(module = c("o1f","o1r","e2f","e2r","o3f","o3r","e4f","e4r","o5f","o5r","e6f","e6r","o7f","o7r","e8f","e8r","o9f","o9r","e10f","e10r","o11f","o11r","e12f","e12r","o13f","o13r","e14f","e14r","o15f","o15r","e16f","e16r","o17fAD","o17rAD"))
ordervector <- tibble(module = c("o1f","o1r","e2f","e2r","o3f","o3r","e4f","e4r","o5f","o5r","e6f","e6r","o7f","o7r","e8f","e8r","o9f","o9r","e10f","e10r","o11f","o11r","e12f","e12r","o13f","o13r","e14f","e14r","o15f","o15r","e16f","e16r","o17fAD","o17rAD"))
#ordervector <- tibble(module = c("o1f","o1r","o3f","o3r","o5f","o5r","o7f","o7r","o9f","o9r","o11f","o11r","o13f","o13r","o15f","o15r","o17fAD","o17rAD","e2f","e2r","e4f","e4r","e6f","e6r","e8f","e8r","e10f","e10r","e12f","e12r","e14f","e14r","e16f","e16r"))
datacleanper <- left_join(data.frame(name=ordervector),datacleanper,by="module")
datacleanper$module.ordered <- factor(datacleanper$module, levels=ordervector$module)
coul = brewer.pal(11, "Spectral")
coul = rev(colorRampPalette(coul)(34))
ggplot(data = datacleanper, aes(x=position, y=percent)) + geom_bar(aes(fill=module.ordered), colour="black",stat="identity") +  scale_x_continuous(breaks = seq(1, 17)) +  scale_fill_manual(values = coul)
head(dataclean)
head(dataclean, 100)
rowsums(dataclean)
rowSums(dataclean)
head(data)
datastats
